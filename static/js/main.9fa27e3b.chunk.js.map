{"version":3,"sources":["components/Square.js","components/Board.js","reducers/index.js","App.js","index.js"],"names":["Square","props","onClick","value","isWin","curClick","type","className","Board","reverseArray","state","historys","isForward","history","slice","reverse","setState","clickList","length","size","square","Array","fill","map","classNames","isDark","isList","xIsNext","status","isWinner","preRowDark","x","y","stepCurrent","checkRow","bind","checkCol","checkSlash","checkBackSlash","checkWinner","handleClick","resetGame","row","col","this","block","count","squares","k","player","r","c","item","pop","t","shift","push","unshift","winner","idx","Math","floor","key","String","fromCharCode","index","i","React","Component","reducers","combineReducers","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fa27e3b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Square(props) {\r\n  const { onClick, value, isWin, curClick } = props;\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={`square ${curClick ? \"square-click\" : \"\"} + ${\r\n        isWin ? \"square-win\" : \"\"\r\n      }`}\r\n      onClick={onClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { size } = this.props;\r\n    this.state = {\r\n      square: Array(size)\r\n        .fill(null)\r\n        .map(() => Array(size).fill(null)),\r\n      classNames: new Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n          new Array(size)\r\n            .fill(null)\r\n            .map(() => ({ isDark: false, isWin: false, isList: false }))\r\n        ),\r\n      xIsNext: true,\r\n      status: \"Next player: X\",\r\n      isWinner: false,\r\n      preRowDark: { x: 0, y: 0 },\r\n      historys: [],\r\n      isForward: true,\r\n      stepCurrent: 0\r\n    };\r\n    this.checkRow = this.checkRow.bind(this);\r\n    this.checkCol = this.checkCol.bind(this);\r\n    this.checkSlash = this.checkSlash.bind(this);\r\n    this.checkBackSlash = this.checkBackSlash.bind(this);\r\n    this.checkWinner = this.checkWinner.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.reverseArray = this.reverseArray.bind(this);\r\n    this.resetGame = this.resetGame.bind(this);\r\n    this.clickList = this.clickList.bind(this);\r\n  }\r\n\r\n  reverseArray = () => {\r\n    const { historys, isForward } = this.state;\r\n    const history = historys.slice();\r\n    historys.reverse();\r\n    this.setState({\r\n      historys: [...history],\r\n      isForward: !isForward\r\n    });\r\n    if (isForward) {\r\n      this.clickList(0);\r\n    } else {\r\n      this.clickList(history.length - 1);\r\n    }\r\n  };\r\n\r\n  checkRow(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const squares = square.slice();\r\n    let k = col + 1;\r\n\r\n    if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n      block += 1;\r\n    }\r\n    while (squares[row][k] === squares[row][col] && k < size) {\r\n      count += 1;\r\n      k += 1;\r\n      if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    k = col - 1;\r\n    if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n      block += 1;\r\n    }\r\n    while (squares[row][k] === squares[row][col] && k >= 0) {\r\n      count += 1;\r\n      k -= 1;\r\n      if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 0 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkCol(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const squares = square.slice();\r\n    let k = row + 1;\r\n    if (\r\n      k < size &&\r\n      squares[k][col] !== squares[row][col] &&\r\n      squares[k][col] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (k < size && squares[k][col] === squares[row][col]) {\r\n      count += 1;\r\n      k += 1;\r\n      if (\r\n        k < size &&\r\n        squares[k][col] !== squares[row][col] &&\r\n        squares[k][col] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    k = row - 1;\r\n    if (\r\n      k >= 0 &&\r\n      squares[k][col] !== squares[row][col] &&\r\n      squares[k][col] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (k >= 0 && squares[k][col] === squares[row][col]) {\r\n      count += 1;\r\n      k -= 1;\r\n      if (\r\n        k >= 0 &&\r\n        squares[k][col] !== squares[row][col] &&\r\n        squares[k][col] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 1 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkSlash(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const squares = square.slice();\r\n    let r = row - 1;\r\n    let c = col + 1;\r\n    if (\r\n      r >= 0 &&\r\n      c < size &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r >= 0 && c < size && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r -= 1;\r\n      c += 1;\r\n      if (\r\n        r >= 0 &&\r\n        c < size &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    r = row + 1;\r\n    c = col - 1;\r\n    if (\r\n      r < size &&\r\n      c >= 0 &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r < size && c >= 0 && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r += 1;\r\n      c -= 1;\r\n      if (\r\n        r < size &&\r\n        c >= 0 &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 2 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkBackSlash(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const squares = square.slice();\r\n    let r = row - 1;\r\n    let c = col - 1;\r\n    if (\r\n      r >= 0 &&\r\n      c >= 0 &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r >= 0 && c >= 0 && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r -= 1;\r\n      c -= 1;\r\n      if (\r\n        r >= 0 &&\r\n        c >= 0 &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    r = row + 1;\r\n    c = col + 1;\r\n    if (\r\n      r < size &&\r\n      c < size &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r < size && c < size && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r += 1;\r\n      c += 1;\r\n      if (\r\n        r < size &&\r\n        c < size &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 3 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkWinner(row, col) {\r\n    let isWin = this.checkRow(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkCol(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkSlash(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkBackSlash(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleClick(row, col) {\r\n    const { size } = this.props;\r\n    const {\r\n      square,\r\n      classNames,\r\n      historys,\r\n      isWinner,\r\n      isForward,\r\n      xIsNext,\r\n      stepCurrent,\r\n      preRowDark\r\n    } = this.state;\r\n    let k = 0;\r\n    let r = 0;\r\n    let c = 0;\r\n    const squares = square.slice();\r\n    const className = classNames.slice();\r\n    const history = historys.slice();\r\n    let item = null;\r\n\r\n    if (squares[row][col] || isWinner) {\r\n      return;\r\n    }\r\n\r\n    if (isForward) {\r\n      while (stepCurrent + 1 < history.length) {\r\n        item = history.pop();\r\n        squares[item.x][item.y] = false;\r\n      }\r\n    } else {\r\n      for (let t = 0; t < stepCurrent; t += 1) {\r\n        item = history.shift();\r\n        squares[item.x][item.y] = false;\r\n      }\r\n    }\r\n\r\n    if (isForward) {\r\n      history.push({ x: row, y: col, player: xIsNext ? \"X\" : \"O\" });\r\n      this.clickList(stepCurrent + 1);\r\n    } else {\r\n      history.unshift({\r\n        x: row,\r\n        y: col,\r\n        player: xIsNext ? \"X\" : \"O\"\r\n      });\r\n      this.clickList(0);\r\n    }\r\n    this.setState({\r\n      historys: [...history]\r\n    });\r\n\r\n    className[preRowDark.x][preRowDark.y].isDark = false;\r\n    className[row][col].isDark = true;\r\n\r\n    squares[row][col] = xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      square: [...squares],\r\n      xIsNext: !xIsNext\r\n    });\r\n    const winner = this.checkWinner(row, col);\r\n    if (winner) {\r\n      className[row][col].isDark = false;\r\n      this.setState({\r\n        status: `Winner: ${winner.player}`,\r\n        isWinner: true\r\n      });\r\n      className[row][col].isWin = true;\r\n      switch (winner.type) {\r\n        case 0:\r\n          k = col + 1;\r\n          while (squares[row][k] === squares[row][col] && k < size) {\r\n            className[row][k].isWin = true;\r\n            k += 1;\r\n          }\r\n          k = col - 1;\r\n          while (squares[row][k] === squares[row][col] && k >= 0) {\r\n            className[row][k].isWin = true;\r\n            k -= 1;\r\n          }\r\n          break;\r\n        case 1:\r\n          k = row + 1;\r\n          while (k < size && squares[k][col] === squares[row][col]) {\r\n            className[k][col].isWin = true;\r\n            k += 1;\r\n          }\r\n          k = row - 1;\r\n          while (k >= 0 && squares[k][col] === squares[row][col]) {\r\n            className[k][col].isWin = true;\r\n            k -= 1;\r\n          }\r\n          break;\r\n        case 2:\r\n          r = row - 1;\r\n          c = col + 1;\r\n          while (r >= 0 && c < size && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r -= 1;\r\n            c += 1;\r\n          }\r\n          r = row + 1;\r\n          c = col - 1;\r\n          while (r < size && c >= 0 && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r += 1;\r\n            c -= 1;\r\n          }\r\n          break;\r\n        case 3:\r\n          r = row - 1;\r\n          c = col - 1;\r\n          while (r >= 0 && c >= 0 && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r -= 1;\r\n            c -= 1;\r\n          }\r\n          r = row + 1;\r\n          c = col + 1;\r\n          while (r < size && c < size && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r += 1;\r\n            c += 1;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      this.setState({\r\n        status: `Next player: ${xIsNext ? \"O\" : \"X\"}`,\r\n        classNames: [...className],\r\n        preRowDark: { x: row, y: col }\r\n      });\r\n    }\r\n  }\r\n\r\n  clickList(idx) {\r\n    const { stepCurrent, historys, classNames } = this.state;\r\n    const { size } = this.props;\r\n    const className = classNames.slice();\r\n    if (historys.length === 0) {\r\n      return;\r\n    }\r\n    let row = Math.floor(stepCurrent / size);\r\n    let col = stepCurrent % size;\r\n    if (stepCurrent >= 0) {\r\n      className[row][col].isList = false;\r\n    }\r\n    row = Math.floor(idx / size);\r\n    col = idx % size;\r\n    className[row][col].isList = true;\r\n    this.setState({\r\n      stepCurrent: idx,\r\n      classNames: [...className]\r\n    });\r\n  }\r\n\r\n  resetGame() {\r\n    const { size } = this.props;\r\n    this.setState({\r\n      square: Array(size)\r\n        .fill(null)\r\n        .map(() => Array(size).fill(null)),\r\n      classNames: new Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n          new Array(size)\r\n            .fill(null)\r\n            .map(() => ({ isDark: false, isWin: false, isList: false }))\r\n        ),\r\n      xIsNext: true,\r\n      status: \"Next player: X\",\r\n      isWinner: false,\r\n      preRowDark: { x: 0, y: 0 },\r\n      historys: [],\r\n      stepCurrent: 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { size } = this.props;\r\n    const { status, historys, classNames, square } = this.state;\r\n    // console.log(historys)\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <button\r\n            className=\"btn-reset\"\r\n            type=\"button\"\r\n            onClick={() => this.resetGame()}\r\n          >\r\n            Reset\r\n          </button>\r\n          <div className=\"status\">{status}</div>\r\n          {Array(size + 1)\r\n            .fill(null)\r\n            .map((item, idx) => (\r\n              <button type=\"button\" className=\"square\" key={String(idx + 1)}>\r\n                {idx > 0 ? String.fromCharCode(idx + 64) : \"\"}\r\n              </button>\r\n            ))}\r\n          {square.map((item, index) => {\r\n            return (\r\n              <div className=\"board-row\" key={String(index)}>\r\n                <button type=\"button\" className=\"square\" key={-1}>\r\n                  {index + 1}\r\n                </button>\r\n                {item.map((i, idx) => (\r\n                  <Square\r\n                    value={i}\r\n                    onClick={() => this.handleClick(index, idx)}\r\n                    key={String(index * size + idx)}\r\n                    curClick={classNames[index][idx].isDark}\r\n                    isWin={classNames[index][idx].isWin}\r\n                  />\r\n                ))}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-history\"\r\n            onClick={this.reverseArray}\r\n          >\r\n            History\r\n          </button>\r\n          {historys.map((item, idx) => {\r\n            return (\r\n              <ol key={item.x * size + item.y}>\r\n                <button\r\n                  type=\"button\"\r\n                  className={`btn-list ${\r\n                    classNames[Math.floor(idx / size)][idx % size].isList\r\n                      ? \"btn-list-clicked\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => this.clickList(idx)}\r\n                >\r\n                  <span>\r\n                    {`Player ${item.player}: [${item.x +\r\n                      1}, ${String.fromCharCode(item.y + 65)}]`}\r\n                  </span>\r\n                </button>\r\n              </ol>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nconst reducers = combineReducers({\r\n})\r\n\r\nexport default reducers","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport Board from \"./components/Board\";\r\nimport \"./App.css\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Board size={20} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}