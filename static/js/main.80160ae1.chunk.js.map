{"version":3,"sources":["components/Square.js","components/Board.js","App.js","index.js"],"names":["Square","props","onClick","value","isWin","curClick","type","className","Board","reverseArray","state","historys","isForward","history","slice","reverse","setState","clickList","length","size","square","Array","fill","map","classNames","isDark","isList","xIsNext","status","isWinner","preRowDark","x","y","stepCurrent","checkRow","bind","checkCol","checkSlash","checkBackSlash","checkWinner","handleClick","renderSquare","getArray","resetGame","number","count","arr","arrTmp","push","key","i","String","fromCharCode","j","this","block","row","Math","floor","col","squares","k","player","r","c","item","pop","t","shift","unshift","winner","idx","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80160ae1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Square(props) {\r\n  const { onClick, value, isWin, curClick } = props;\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={`square ${curClick ? \"square-click\" : \"\"} + ${\r\n        isWin ? \"square-win\" : \"\"\r\n      }`}\r\n      onClick={onClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { size } = this.props;\r\n    this.state = {\r\n      square: Array(size)\r\n        .fill(null)\r\n        .map(() => Array(size).fill(null)),\r\n      classNames: new Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n          new Array(size)\r\n            .fill(null)\r\n            .map(() => ({ isDark: false, isWin: false, isList: false }))\r\n        ),\r\n      xIsNext: true,\r\n      status: 'Next player: X',\r\n      isWinner: false,\r\n      preRowDark: { x: 0, y: 0 },\r\n      historys: [],\r\n      isForward: true,\r\n      stepCurrent: 0\r\n    };\r\n    this.checkRow = this.checkRow.bind(this);\r\n    this.checkCol = this.checkCol.bind(this);\r\n    this.checkSlash = this.checkSlash.bind(this);\r\n    this.checkBackSlash = this.checkBackSlash.bind(this);\r\n    this.checkWinner = this.checkWinner.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.reverseArray = this.reverseArray.bind(this);\r\n    this.renderSquare = this.renderSquare.bind(this);\r\n    this.getArray = this.getArray.bind(this);\r\n    this.resetGame = this.resetGame.bind(this);\r\n    this.clickList = this.clickList.bind(this);\r\n  }\r\n\r\n  getArray(number) {\r\n    let count = 0;\r\n    const arr = [];\r\n    let arrTmp = [];\r\n\r\n    arrTmp.push(\r\n      <button type='button' className='square' key={0}>\r\n        {}\r\n      </button>\r\n    );\r\n    for (let i = 0; i < number; i += 1) {\r\n      arrTmp.push(\r\n        <button type='button' className='square' key={i + 1}>\r\n          {String.fromCharCode(i + 65)}\r\n        </button>\r\n      );\r\n    }\r\n    arr.push(arrTmp);\r\n\r\n    for (let i = 0; i < number; i += 1) {\r\n      arrTmp = [];\r\n      arrTmp.push(\r\n        <button type='button' className='square' key={-1}>\r\n          {i + 1}\r\n        </button>\r\n      );\r\n      for (let j = 0; j < number; j += 1) {\r\n        arrTmp.push(this.renderSquare(count));\r\n        count += 1;\r\n      }\r\n      arr.push(\r\n        <div className=\"board-row\" key={i}>\r\n          {arrTmp}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  reverseArray = () => {\r\n    const { historys, isForward } = this.state;\r\n    const history = historys.slice();\r\n    historys.reverse();\r\n    this.setState({\r\n      historys: [...history],\r\n      isForward: !isForward\r\n    });\r\n    if (isForward) {\r\n      this.clickList(0);\r\n    } else {\r\n      this.clickList(history.length - 1);\r\n    }\r\n  };\r\n\r\n  checkRow(i) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const row = Math.floor(i / size);\r\n    const col = i % size;\r\n    const squares = square.slice();\r\n    let k = col + 1;\r\n\r\n    if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n      block += 1;\r\n    }\r\n    while (squares[row][k] === squares[row][col] && k < size) {\r\n      count += 1;\r\n      k += 1;\r\n      if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    k = col - 1;\r\n    if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n      block += 1;\r\n    }\r\n    while (squares[row][k] === squares[row][col] && k >= 0) {\r\n      count += 1;\r\n      k -= 1;\r\n      if (squares[row][k] !== squares[row][col] && squares[row][k] !== null) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 0 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkCol(i) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const row = Math.floor(i / size);\r\n    const col = i % size;\r\n    const squares = square.slice();\r\n    let k = row + 1;\r\n    if (\r\n      k < size &&\r\n      squares[k][col] !== squares[row][col] &&\r\n      squares[k][col] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (k < size && squares[k][col] === squares[row][col]) {\r\n      count += 1;\r\n      k += 1;\r\n      if (\r\n        k < size &&\r\n        squares[k][col] !== squares[row][col] &&\r\n        squares[k][col] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    k = row - 1;\r\n    if (\r\n      k >= 0 &&\r\n      squares[k][col] !== squares[row][col] &&\r\n      squares[k][col] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (k >= 0 && squares[k][col] === squares[row][col]) {\r\n      count += 1;\r\n      k -= 1;\r\n      if (\r\n        k >= 0 &&\r\n        squares[k][col] !== squares[row][col] &&\r\n        squares[k][col] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 1 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkSlash(i) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const row = Math.floor(i / size);\r\n    const col = i % size;\r\n    const squares = square.slice();\r\n    let r = row - 1;\r\n    let c = col + 1;\r\n    if (\r\n      r >= 0 &&\r\n      c < size &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r >= 0 && c < size && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r -= 1;\r\n      c += 1;\r\n      if (\r\n        r >= 0 &&\r\n        c < size &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    r = row + 1;\r\n    c = col - 1;\r\n    if (\r\n      r < size &&\r\n      c >= 0 &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r < size && c >= 0 && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r += 1;\r\n      c -= 1;\r\n      if (\r\n        r < size &&\r\n        c >= 0 &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 2 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkBackSlash(i) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    const row = Math.floor(i / size);\r\n    const col = i % size;\r\n    const squares = square.slice();\r\n    let r = row - 1;\r\n    let c = col - 1;\r\n    if (\r\n      r >= 0 &&\r\n      c >= 0 &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r >= 0 && c >= 0 && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r -= 1;\r\n      c -= 1;\r\n      if (\r\n        r >= 0 &&\r\n        c >= 0 &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    r = row + 1;\r\n    c = col + 1;\r\n    if (\r\n      r < size &&\r\n      c < size &&\r\n      squares[r][c] !== squares[row][col] &&\r\n      squares[r][c] !== null\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r < size && c < size && squares[r][c] === squares[row][col]) {\r\n      count += 1;\r\n      r += 1;\r\n      c += 1;\r\n      if (\r\n        r < size &&\r\n        c < size &&\r\n        squares[r][c] !== squares[row][col] &&\r\n        squares[r][c] !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: squares[row][col], type: 3 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkWinner(i) {\r\n    let isWin = this.checkRow(i);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkCol(i);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkSlash(i);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkBackSlash(i);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleClick(i) {\r\n    const { size } = this.props;\r\n    const {\r\n      square,\r\n      classNames,\r\n      historys,\r\n      isWinner,\r\n      isForward,\r\n      xIsNext,\r\n      stepCurrent,\r\n      preRowDark\r\n    } = this.state;\r\n    const row = Math.floor(i / size);\r\n    const col = i % size;\r\n    let k = 0;\r\n    let r = 0;\r\n    let c = 0;\r\n    const squares = square.slice();\r\n    const className = classNames.slice();\r\n    const history = historys.slice();\r\n    let item = null;\r\n\r\n    if (squares[row][col] || isWinner) {\r\n      return;\r\n    }\r\n\r\n    if (isForward) {\r\n      while (stepCurrent + 1 < history.length) {\r\n        item = history.pop();\r\n        squares[item.x][item.y] = false;\r\n      }\r\n    } else {\r\n      for (let t = 0; t < stepCurrent; t += 1) {\r\n        item = history.shift();\r\n        squares[item.x][item.y] = false;\r\n      }\r\n    }\r\n\r\n    if (isForward) {\r\n      history.push({ x: row, y: col, player: xIsNext ? 'X' : 'O' });\r\n      this.clickList(stepCurrent + 1);\r\n    } else {\r\n      history.unshift({\r\n        x: row,\r\n        y: col,\r\n        player: xIsNext ? 'X' : 'O'\r\n      });\r\n      this.clickList(0);\r\n    }\r\n    this.setState({\r\n      historys: [...history]\r\n    });\r\n\r\n    className[preRowDark.x][preRowDark.y].isDark = false;\r\n    className[row][col].isDark = true;\r\n\r\n    squares[row][col] = xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      square: [...squares],\r\n      xIsNext: !xIsNext\r\n    });\r\n    const winner = this.checkWinner(i);\r\n    if (winner) {\r\n      className[row][col].isDark = false;\r\n      this.setState({\r\n        status: `Winner: ${winner.player}`,\r\n        isWinner: true\r\n      });\r\n      className[row][col].isWin = true;\r\n      switch (winner.type) {\r\n        case 0:\r\n          k = col - 1;\r\n          while (squares[row][k] === squares[row][col] && k < size) {\r\n            className[row][k].isWin = true;\r\n            k += 1;\r\n          }\r\n          k = col - 1;\r\n          while (squares[row][k] === squares[row][col] && k >= 0) {\r\n            className[row][k].isWin = true;\r\n            k -= 1;\r\n          }\r\n          break;\r\n        case 1:\r\n          k = row + 1;\r\n          while (k < size && squares[k][col] === squares[row][col]) {\r\n            className[k][col].isWin = true;\r\n            k += 1;\r\n          }\r\n          k = row - 1;\r\n          while (k >= 0 && squares[k][col] === squares[row][col]) {\r\n            className[k][col].isWin = true;\r\n            k -= 1;\r\n          }\r\n          break;\r\n        case 2:\r\n          r = row - 1;\r\n          c = col + 1;\r\n          while (r >= 0 && c < size && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r -= 1;\r\n            c += 1;\r\n          }\r\n          r = row + 1;\r\n          c = col - 1;\r\n          while (r < size && c >= 0 && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r += 1;\r\n            c -= 1;\r\n          }\r\n          break;\r\n        case 3:\r\n          r = row - 1;\r\n          c = col - 1;\r\n          while (r >= 0 && c >= 0 && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r -= 1;\r\n            c -= 1;\r\n          }\r\n          r = row + 1;\r\n          c = col + 1;\r\n          while (r < size && c < size && squares[r][c] === squares[row][col]) {\r\n            className[r][c].isWin = true;\r\n            r += 1;\r\n            c += 1;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      this.setState({\r\n        status: `Next player: ${xIsNext ? 'O' : 'X'}`,\r\n        classNames: [...className],\r\n        preRowDark: { x: row, y: col }\r\n      });\r\n    }\r\n  }\r\n\r\n  clickList(idx) {\r\n    const { stepCurrent, historys, classNames } = this.state;\r\n    const { size } = this.props;\r\n    const className = classNames.slice();\r\n    if (historys.length === 0) {\r\n      return;\r\n    }\r\n    let row = Math.floor(stepCurrent / size);\r\n    let col = stepCurrent % size;\r\n    if (stepCurrent >= 0) {\r\n      className[row][col].isList = false;\r\n    }\r\n    row = Math.floor(idx / size);\r\n    col = idx % size;\r\n    className[row][col].isList = true;\r\n    this.setState({\r\n      stepCurrent: idx,\r\n      classNames: [...className]\r\n    });\r\n  }\r\n\r\n  resetGame() {\r\n    const { size } = this.props;\r\n    this.setState({\r\n      square: Array(size)\r\n        .fill(null)\r\n        .map(() => Array(size).fill(null)),\r\n      classNames: new Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n          new Array(size)\r\n            .fill(null)\r\n            .map(() => ({ isDark: false, isWin: false, isList: false }))\r\n        ),\r\n      xIsNext: true,\r\n      status: 'Next player: X',\r\n      isWinner: false,\r\n      preRowDark: { x: 0, y: 0 },\r\n      historys: [],\r\n      stepCurrent: 0\r\n    });\r\n  }\r\n\r\n  renderSquare(i) {\r\n    const { square, classNames } = this.state;\r\n    const { size } = this.props;\r\n\r\n    const row = Math.floor(i / size);\r\n    const col = i % size;\r\n    return (\r\n      <Square\r\n        value={square[row][col]}\r\n        onClick={() => this.handleClick(i)}\r\n        key={i}\r\n        curClick={classNames[row][col].isDark}\r\n        isWin={classNames[row][col].isWin}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { size } = this.props;\r\n    const { status, historys, classNames } = this.state;\r\n    // console.log(historys)\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <button\r\n            className=\"btn-reset\"\r\n            type=\"button\"\r\n            onClick={() => this.resetGame()}\r\n          >\r\n            Reset\r\n          </button>\r\n          <div className=\"status\">{status}</div>\r\n          {this.getArray(size)}\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-history\"\r\n            onClick={this.reverseArray}\r\n          >\r\n            History\r\n          </button>\r\n          {historys.map((item, idx) => {\r\n            return (\r\n              <ol key={item.x * size + item.y}>\r\n                <button\r\n                  type=\"button\"\r\n                  className={`btn-list ${\r\n                    classNames[Math.floor(idx / size)][idx % size].isList\r\n                      ? 'btn-list-clicked'\r\n                      : ''\r\n                  }`}\r\n                  onClick={() => this.clickList(idx)}\r\n                >\r\n                  <span>\r\n                    {`Player ${item.player}: [${item.x +\r\n                      1}, ${String.fromCharCode(item.y + 65)}]`}\r\n                  </span>\r\n                </button>\r\n              </ol>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Board from './components/Board';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Board size={20} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}