{"version":3,"sources":["components/Cell.js","components/Board.js","components/Button.js","components/Control-online.js","components/Chess.js","reducers/index.js","App.js","index.js"],"names":["Cell","row","col","handleClick","value","curClick","isWin","onClick","className","Board","size","square","key","String","Array","fill","map","item","idx","fromCharCode","index","i","isDark","name","type","Control","resetGame","undoGame","Header","Layout","Footer","Sider","Content","Chess","props","state","xIsNext","status","isWinner","preRowDark","x","y","historys","this","block","count","k","player","r","c","checkRow","checkCol","checkSlash","checkBackSlash","newSquare","slice","newHistorys","push","winner","checkWinner","setState","length","current","pop","last","style","background","bind","width","React","Component","reducers","combineReducers","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09c62516.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React from \"react\";\r\n\r\nexport default function Cell({\r\n  row,\r\n  col,\r\n  handleClick,\r\n  value,\r\n  curClick,\r\n  isWin\r\n}) {\r\n  const clickSquare = () => {\r\n    handleClick(row, col);\r\n  };\r\n\r\n  return (\r\n    <td\r\n      onClick={clickSquare}\r\n      className={`tbl-cell ${curClick ? \"square-click\" : \"\"} ${\r\n        isWin ? \"square-win\" : \"\"\r\n      }`}\r\n    >\r\n      {value}\r\n    </td>\r\n  );\r\n}\r\n","/* eslint-disable react/jsx-no-bind */\r\n/* eslint-disable react/react-in-jsx-scope */\r\nimport React from \"react\";\r\n\r\nimport Cell from \"./Cell\";\r\n\r\nexport default function Board({ size, square, handleClick }) {\r\n  return (\r\n    <table className=\"tbl-board\">\r\n      <tbody>\r\n        <tr key={String(-1)}>\r\n          {Array(size + 1)\r\n            .fill(null)\r\n            .map((item, idx) => (\r\n              <Cell\r\n                key={String(idx + 1)}\r\n                value={idx > 0 ? String.fromCharCode(idx + 64) : \"\"}\r\n                handleClick={() => {}}\r\n              />\r\n            ))}\r\n        </tr>\r\n        {square.map((item, index) => {\r\n          return (\r\n            <tr key={String(index)}>\r\n              <Cell key={-1} value={index + 1} handleClick={() => {}} />\r\n              {item.map((i, idx) => (\r\n                <Cell\r\n                  row={index}\r\n                  col={idx}\r\n                  value={square[index][idx].value}\r\n                  handleClick={handleClick}\r\n                  key={String(index * size + idx)}\r\n                  curClick={square[index][idx].isDark}\r\n                  isWin={square[index][idx].isWin}\r\n                />\r\n              ))}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport React from \"react\";\r\n\r\nexport default function Cell({ name, handleClick }) {\r\n  const clickButton = () => {\r\n    handleClick();\r\n  };\r\n\r\n  return (\r\n    <button type=\"button\" className=\"btn-click\" onClick={clickButton}>\r\n      {name}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nexport default function Control({ resetGame, undoGame }) {\r\n  const reset = () => {\r\n    resetGame();\r\n  };\r\n\r\n  const undo = () => {\r\n    undoGame();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button name=\"Reset\" handleClick={reset} />\r\n      <Button name=\"Undo\" handleClick={undo} />\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable react/jsx-no-bind */\r\nimport React from \"react\";\r\nimport { Layout } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport Board from \"./Board\";\r\nimport Control from \"./Control-online\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nexport default class Chess extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { size } = this.props;\r\n    this.state = {\r\n      square: new Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n          new Array(size)\r\n            .fill(null)\r\n            .map(() => ({ value: null, isDark: false, isWin: false }))\r\n        ),\r\n      xIsNext: true,\r\n      status: \"Next player: X\",\r\n      isWinner: false,\r\n      preRowDark: { x: 0, y: 0 },\r\n      historys: []\r\n    };\r\n  }\r\n\r\n  checkRow(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n\r\n    // kiểm tra phải\r\n    let k = col + 1;\r\n    while (k < size && square[row][k].value === square[row][col].value) {\r\n      count += 1;\r\n      if (\r\n        square[row][k].value !== null &&\r\n        square[row][k].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n      k += 1;\r\n    }\r\n\r\n    // kiểm tra trái\r\n    k = col - 1;\r\n    while (k >= 0 && square[row][k].value === square[row][col].value) {\r\n      count += 1;\r\n\r\n      if (\r\n        square[row][k].value !== null &&\r\n        square[row][k].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n      k -= 1;\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: square[row][col].value, type: 0 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkCol(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n\r\n    // kiểm tra trên\r\n    let k = row + 1;\r\n\r\n    while (k < size && square[k][col].value === square[row][col].value) {\r\n      count += 1;\r\n      if (\r\n        k + 1 < size &&\r\n        square[k][col].value !== null &&\r\n        square[k][col].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n      k += 1;\r\n    }\r\n\r\n    // kiểm tra dưới\r\n    k = row - 1;\r\n    while (k >= 0 && square[k][col].value === square[row][col].value) {\r\n      count += 1;\r\n      if (\r\n        k >= 1 &&\r\n        square[k][col].value !== null &&\r\n        square[k][col].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n      k -= 1;\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: square[row][col].value, type: 1 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkSlash(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    let r = row - 1;\r\n    let c = col + 1;\r\n    if (\r\n      r >= 0 &&\r\n      c < size &&\r\n      square[r][c].value !== null &&\r\n      square[r][c].value !== square[row][col].value\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (\r\n      r >= 0 &&\r\n      c < size &&\r\n      square[r][c].value === square[row][col].value\r\n    ) {\r\n      count += 1;\r\n      r -= 1;\r\n      c += 1;\r\n      if (\r\n        r >= 0 &&\r\n        c < size &&\r\n        square[r][c].value !== null &&\r\n        square[r][c].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    r = row + 1;\r\n    c = col - 1;\r\n    if (\r\n      r < size &&\r\n      c >= 0 &&\r\n      square[r][c].value !== null &&\r\n      square[r][c].value !== square[row][col].value\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (\r\n      r < size &&\r\n      c >= 0 &&\r\n      square[r][c].value === square[row][col].value\r\n    ) {\r\n      count += 1;\r\n      r += 1;\r\n      c -= 1;\r\n      if (\r\n        r < size &&\r\n        c >= 0 &&\r\n        square[r][c].value !== square[row][col].value &&\r\n        square[r][c].value !== null\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: square[row][col].value, type: 2 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkBackSlash(row, col) {\r\n    const { size } = this.props;\r\n    const { square } = this.state;\r\n    let block = 0;\r\n    let count = 1;\r\n    let r = row - 1;\r\n    let c = col - 1;\r\n    if (\r\n      r >= 0 &&\r\n      c >= 0 &&\r\n      square[r][c].value !== null &&\r\n      square[r][c].value !== square[row][col].value\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (r >= 0 && c >= 0 && square[r][c].value === square[row][col].value) {\r\n      count += 1;\r\n      r -= 1;\r\n      c -= 1;\r\n      if (\r\n        r >= 0 &&\r\n        c >= 0 &&\r\n        square[r][c].value !== null &&\r\n        square[r][c].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    r = row + 1;\r\n    c = col + 1;\r\n    if (\r\n      r < size &&\r\n      c < size &&\r\n      square[r][c].value !== null &&\r\n      square[r][c].value !== square[row][col].value\r\n    ) {\r\n      block += 1;\r\n    }\r\n    while (\r\n      r < size &&\r\n      c < size &&\r\n      square[r][c].value === square[row][col].value\r\n    ) {\r\n      count += 1;\r\n      r += 1;\r\n      c += 1;\r\n      if (\r\n        r < size &&\r\n        c < size &&\r\n        square[r][c].value !== null &&\r\n        square[r][c].value !== square[row][col].value\r\n      ) {\r\n        block += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (block < 2 && count === 5) {\r\n      return { player: square[row][col].value, type: 3 };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  checkWinner(row, col) {\r\n    let isWin = this.checkRow(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkCol(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkSlash(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    isWin = this.checkBackSlash(row, col);\r\n    if (isWin !== null) {\r\n      return isWin;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleClick(row, col) {\r\n    const { size } = this.props;\r\n    const { square, xIsNext, isWinner, preRowDark, historys } = this.state;\r\n\r\n    let k = 0;\r\n    let r = 0;\r\n    let c = 0;\r\n    const newSquare = square.slice();\r\n    const newHistorys = historys.slice();\r\n\r\n    if (newSquare[row][col].value || isWinner) {\r\n      return;\r\n    }\r\n\r\n    // thêm lịch sử bước đi\r\n    newHistorys.push({ x: row, y: col, player: xIsNext ? \"X\" : \"O\" });\r\n\r\n    // thay đổi vị trí đánh hiện tại\r\n    newSquare[preRowDark.x][preRowDark.y].isDark = false;\r\n    newSquare[row][col].isDark = true;\r\n\r\n    newSquare[row][col].value = xIsNext ? \"X\" : \"O\";\r\n\r\n    const winner = this.checkWinner(row, col);\r\n    if (winner) {\r\n      newSquare[row][col].isDark = false;\r\n      newSquare[row][col].isWin = true;\r\n      switch (winner.type) {\r\n        case 0:\r\n          k = col + 1;\r\n          while (\r\n            k < size &&\r\n            newSquare[row][k].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[row][k].isWin = true;\r\n            k += 1;\r\n          }\r\n          k = col - 1;\r\n          while (\r\n            k >= 0 &&\r\n            newSquare[row][k].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[row][k].isWin = true;\r\n            k -= 1;\r\n          }\r\n          break;\r\n        case 1:\r\n          k = row + 1;\r\n          while (\r\n            k < size &&\r\n            newSquare[k][col].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[k][col].isWin = true;\r\n            k += 1;\r\n          }\r\n          k = row - 1;\r\n          while (\r\n            k >= 0 &&\r\n            newSquare[k][col].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[k][col].isWin = true;\r\n            k -= 1;\r\n          }\r\n          break;\r\n        case 2:\r\n          r = row - 1;\r\n          c = col + 1;\r\n          while (\r\n            r >= 0 &&\r\n            c < size &&\r\n            newSquare[r][c].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[r][c].isWin = true;\r\n            r -= 1;\r\n            c += 1;\r\n          }\r\n          r = row + 1;\r\n          c = col - 1;\r\n          while (\r\n            r < size &&\r\n            c >= 0 &&\r\n            newSquare[r][c].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[r][c].isWin = true;\r\n            r += 1;\r\n            c -= 1;\r\n          }\r\n          break;\r\n        case 3:\r\n          r = row - 1;\r\n          c = col - 1;\r\n          while (\r\n            r >= 0 &&\r\n            c >= 0 &&\r\n            newSquare[r][c].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[r][c].isWin = true;\r\n            r -= 1;\r\n            c -= 1;\r\n          }\r\n          r = row + 1;\r\n          c = col + 1;\r\n          while (\r\n            r < size &&\r\n            c < size &&\r\n            newSquare[r][c].value === newSquare[row][col].value\r\n          ) {\r\n            newSquare[r][c].isWin = true;\r\n            r += 1;\r\n            c += 1;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      this.setState({\r\n        status: `Winner: ${winner.player}`,\r\n        isWinner: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        status: `Next player: ${xIsNext ? \"O\" : \"X\"}`,\r\n        preRowDark: { x: row, y: col }\r\n      });\r\n    }\r\n    this.setState({\r\n      square: [...newSquare],\r\n      xIsNext: !xIsNext,\r\n      historys: [...newHistorys]\r\n    });\r\n  }\r\n\r\n  undoGame() {\r\n    const { historys, square, xIsNext } = this.state;\r\n    const newHistorys = historys.slice();\r\n    const newSquare = square.slice();\r\n    if (historys.length === 0) {\r\n      return;\r\n    }\r\n    const current = newHistorys.pop();\r\n    const last =\r\n      newHistorys.length === 0\r\n        ? { x: 0, y: 0 }\r\n        : {\r\n            x: newHistorys[newHistorys.length - 1].x,\r\n            y: newHistorys[newHistorys.length - 1].y\r\n          };\r\n    newSquare[current.x][current.y].value = null;\r\n    newSquare[current.x][current.y].isDark = false;\r\n    if (newHistorys.length > 0) {\r\n      newSquare[last.x][last.y].isDark = true;\r\n    }\r\n\r\n    this.setState({\r\n      historys: [...newHistorys],\r\n      square: [...newSquare],\r\n      status: `Next player: ${xIsNext ? \"O\" : \"X\"}`,\r\n      preRowDark: last,\r\n      xIsNext: !xIsNext\r\n    });\r\n  }\r\n\r\n  resetGame() {\r\n    const { size } = this.props;\r\n    this.setState({\r\n      square: new Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n          new Array(size)\r\n            .fill(null)\r\n            .map(() => ({ value: null, isDark: false, isWin: false }))\r\n        ),\r\n      xIsNext: true,\r\n      status: \"Next player: X\",\r\n      isWinner: false,\r\n      preRowDark: { x: 0, y: 0 },\r\n      historys: []\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { size } = this.props;\r\n    const { status, square } = this.state;\r\n    return (\r\n      <div>\r\n        <Layout>\r\n          <Header style={{ background: \"red\" }}>\r\n            <div className=\"status\">{status}</div>\r\n          </Header>\r\n          <Layout>\r\n            <Content>\r\n              <Board\r\n                size={size}\r\n                square={square}\r\n                handleClick={this.handleClick.bind(this)}\r\n              />\r\n            </Content>\r\n            <Sider width={400}>\r\n              <center>\r\n                <Control\r\n                  resetGame={this.resetGame.bind(this)}\r\n                  undoGame={this.undoGame.bind(this)}\r\n                />\r\n              </center>\r\n            </Sider>\r\n          </Layout>\r\n          <Footer>Coppyright by phuocantd</Footer>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nconst reducers = combineReducers({\r\n})\r\n\r\nexport default reducers","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport Chess from \"./components/Chess\";\r\nimport \"./App.css\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Chess size={20} />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}